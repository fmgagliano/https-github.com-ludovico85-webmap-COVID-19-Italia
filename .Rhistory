ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+
abs(x = "data", y = "casi totali per regione")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+
labs(x = "data", y = "casi totali per regione")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplotly(p1)
p1<-ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+
labs(x = "data", y = "casi totali per regione")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplotly(p1)
library(MASS)
library(vcdExtra)
library(ggplot2)
setwd("J:\\Progetti\\Mauro_Lontra")
table<-read.table("dataset2020.txt", sep = ";", head = T)
tab1 = xtabs(freq ~ ., data = table)
summary(tab1)
t1<-read.table("M1.txt", sep = ";", head = T)
t1
M1<-glm(freq~season+vegetation_cov+barriers, data = t1, family = poisson)
summary(M1)
t2<-read.table("M2.txt", sep = ";", head = T)
t2
M2<-glm(freq~season+agriculture+barriers, data = t2, family = poisson)
summary(M2)
t3<-read.table("M3.txt", sep = ";", head = T)
t3
M3<-glm(freq~season+water_distance+barriers, data = t3, family = poisson)
summary(M3)
t4<-read.table("M4.txt", sep = ";", head = T)
t4
M4<-glm(freq~season+vegetation_cov+road_lin, data = t4, family = poisson)
summary(M4)
t5<-read.table("M5.txt", sep = ";", head = T)
t5
M5<-glm(freq~season.4+agriculture+road_lin, data = t5, family = poisson)
summary(M5)
t6<-read.table("M6.txt", sep = ";", head = T)
t6
M6<-glm(freq~season+water_distance+road_lin, data = t6, family = poisson)
summary(M6)
t7<-read.table("M7.txt", sep = ";", head = T)
t7
M7<-glm(freq~season+vegetation_cov+road_type, data = t7, family = poisson)
summary(M7)
t8<-read.table("M8.txt", sep = ";", head = T)
t8
M8<-glm(freq~season+agriculture+road_type, data = t8, family = poisson)
summary(M8)
t9<-read.table("M9.txt", sep = ";", head = T)
t9
M9<-glm(freq~season+water_distance+road_type, data = t9, family = poisson)
summary(M9)
AIC(M1, M2, M3, M4, M5, M6, M7, M8, M9)
t5<-read.table("M5.txt", sep = ";", head = T)
t5
M5<-glm(freq~season.4+agriculture+road_lin, data = t5, family = poisson)
M5<-glm(freq~season+agriculture+road_lin, data = t5, family = poisson)
summary(M5)
install.packages("MuMIn")
library(MuMIn)
AICc(M1, M2, M3, M4, M5, M6, M7, M8, M9)
AIC(M1, M2, M3, M4, M5, M6, M7, M8, M9)
MuMIn::AIC(M1, M2, M3, M4, M5, M6, M7, M8, M9)
MuMIn::AIC
AIC::MuMIn(M1, M2, M3, M4, M5, M6, M7, M8, M9)
MuMIn::AICc(M1, M2, M3, M4, M5, M6, M7, M8, M9)
bootWeights(M1, M2, M3, M4, M5, M6, M7, M8, M9, R=100, rank = c("AICc"))
install.packages("nonnest2")
library(nonnest2)
vuongtest(M1, M2)
vuongtest(M1, M2, M3)
vuongtest(M1, M8)
summary(M1)
summary(M2)
summary(M3)
summary(M4)
summary(M5)
summary(M6)
summary(M7)
summary(M8)
summary(M9)
M8<-glm(freq~season+agriculture+road_type, data = t8, family = poisson)
summary(M8)
kill<-read.table("dataset_marzo2020.txt", sep = ";", head = T, row.names = 1)
kill
table(Cars93$season)
table(kill$season)
table(kill$road_type)
table(kill$season, kill$road_type)
setwd("J:\\Progetti\\Mauro_Lontra")
kill<-read.table("ultimo.txt", sep = ";", head = T)
kill
kill.subset<-kill[, c(3,4,5,6,7,8,9)]
kill.subset
GKmatrix1<- GKtauDataframe(kill.subset)
############################# ultime analisi ##################################################################
library(GoodmanKruskal)
GKmatrix1<- GKtauDataframe(kill.subset)
plot(GKmatrix1, corrColors = "red")
table(kill$season, kill$road_type)
as.data.frame(table(kill$season, kill$road_type))
kill.subset
kill
kill.subset<-kill[, c(3,4,5,6,7,8,9,10)]
GKmatrix1<- GKtauDataframe(kill.subset)
plot(GKmatrix1, corrColors = "red")
table(kill$water_distance_class)
as.data.frame(table(kill$water_distance_class))
t1<-as.data.frame(table(kill$water_distance_class))
Mod1<-glm(freq~Var1, data = t1, family = poisson)
Mod1<-glm(Freq~Var1, data = t1, family = poisson)
summary(M1)
t1<-as.data.frame(table(kill$water_distance_class))
Mod1<-glm(Freq~Var1, data = t1, family = poisson)
summary(M1)
t1
summary(Mod1)
kill
t2<-as.data.frame(table(kill$water_distance_class, kill$season))
Mod2<-glm(Freq~Var1, data = t2, family = poisson)
summary(Mod2)
t2
Mod2<-glm(Freq~Var1+Var2, data = t2, family = poisson)
summary(Mod2)
kill
t3<-as.data.frame(table(kill$water_distance_class, kill$vegetation_cover))
Mod3<-glm(Freq~Var1+Var2, data = t3, family = poisson)
summary(Mod3)
setwd("J:\\Progetti\\Mauro_Lontra")
kill<-read.table("ultimo.txt", sep = ";", head = T)
kill
kill.subset<-kill[, c(3,4,5,6,7,8,9,11)]
GKmatrix1<- GKtauDataframe(kill.subset)
plot(GKmatrix1, corrColors = "red")
table(kill$water_distance_class2)
t1<-as.data.frame(table(kill$water_distance_class))
Mod1<-glm(Freq~Var1, data = t1, family = poisson)
summary(Mod1)
table(kill$water_distance_class2)
t1<-as.data.frame(table(kill$water_distance_class2))
Mod1<-glm(Freq~Var1, data = t1, family = poisson)
summary(Mod1)
t2<-as.data.frame(table(kill$water_distance_class2, kill$season))
Mod2<-glm(Freq~Var1+Var2, data = t2, family = poisson)
summary(Mod2)
t3<-as.data.frame(table(kill$water_distance_class2, kill$vegetation_cover))
Mod3<-glm(Freq~Var1+Var2, data = t3, family = poisson)
summary(Mod3)
t4<-as.data.frame(table(kill$water_distance_class2, kill$agricolture))
Mod4<-glm(Freq~Var1+Var2, data = t4, family = poisson)
summary(Mod4)
t2<-as.data.frame(table(kill$water_distance_class2, kill$season))
Mod2<-glm(Freq~Var1+Var2, data = t2, family = poisson)
summary(Mod2)
t1a<-as.data.frame(table(kill$water_distance_class2))
Mod1a<-glm(Freq~Var1, data = t1a, family = poisson)
summary(Mod1a)
t2a<-as.data.frame(table(kill$water_distance_class2, kill$agricolture))
Mod2a<-glm(Freq~Var1, data = t2a, family = poisson)
summary(Mod2a)
t2a<-as.data.frame(table(kill$water_distance_class2, kill$agricolture))
Mod2a<-glm(Freq~Var1+Var2, data = t2a, family = poisson)
summary(Mod2a)
t3a<-as.data.frame(table(kill$water_distance_class2, kill$vegetation_cover))
Mod3a<-glm(Freq~Var1+Var2, data = t3a, family = poisson)
summary(Mod3a)
t4a<-as.data.frame(table(kill$water_distance_class2, kill$vegetation_cover, kill$agricolture))
Mod4a<-glm(Freq~Var1+Var2+Var3, data = t4a, family = poisson)
summary(Mod4a)
t5a<-as.data.frame(table(kill$vegetation_cover, kill$agricolture))
Mod5a<-glm(Freq~Var1+Var2, data = t5a, family = poisson)
summary(Mod5a)
MuMIn::AICc(t1a, t2a, t3a, t4a, t5a)
MuMIn::AICc(Mod1a, Mod2a, Mod3a, Mod4a, Mod5a)
MuMIn::AIC(Mod1a, Mod2a, Mod3a, Mod4a, Mod5a)
AIC(Mod1a, Mod2a, Mod3a, Mod4a, Mod5a)
vuongtest(Mod1a, Mod2a)
vuongtest(Mod1a, Mod2a)
AIC(Mod1a, Mod2a, Mod3a, Mod4a, Mod5a)
cbind(Mod1a$data, fitted(Mod1a))
cbind(Mod2a$data, fitted(Mod2a))
cbind(Mod3a$data, fitted(Mod3a))
cbind(Mod4a$data, fitted(Mod5a))
cbind(Mod5a$data, fitted(Mod5a))
cbind(Mod6a$data, fitted(Mod6a))
cbind(Mod4a$data, fitted(Mod4a))
cbind(Mod5a$data, fitted(Mod5a))
AIC(Mod1a,Mod2a,Mod4a,Mod4a,Mod5a)
aic(Mod1a,Mod2a,Mod4a,Mod4a,Mod5a)
AIC(Mod1a,Mod2a,Mod4a,Mod4a,Mod5a)
AIC(Mod1a)
AIC(Mod1a, Mod2a)
AIC(Mod1a, Mod2a, Mod3a)
AIC(Mod1a, Mod2a, Mod3a, Mod4a)
AIC(Mod1a, Mod2a, Mod3a, Mod4a, Mod5a)
cbind(Mod4a$data, fitted(Mod4a))
summary(Mod4a)
(31.0459-6.8991)/31.0459
summary(Mod1a)
setwd("I:\\Progetti\\GitHub\\webmap-COVID-19-Italia")
library(RCurl)
library(ggplot2)
library(tidyr)
library(plotly)
library(reshape2)
library(rjson)
source("custom_theme.R") ##funzione per customizzare l'output di ggplot2 ##
########################################################################################
### lettura dei dati andamento nazionale direttamente dal repo github e formattazione###
########################################################################################
url<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = andamento_nazionale, col = data, into = c("data", "ora"), sep = "T")
andamento_nazionale$data<-as.Date(andamento_nazionale$data)
#####################################################################
### chart 0 grafico percentuale tamponi positivi su tamponi totali###
################# N.B. aggiornare la data############################
#####################################################################
library(data.table)
data_chart0<-andamento_nazionale[, c("data", "totale_casi", "tamponi")]
setDT(data_chart0)[, tamponi.differenza := tamponi - shift(tamponi)]
setDT(data_chart0)[, casi.differenza := totale_casi - shift(totale_casi)]
data_chart0$percentuale<-round((data_chart0$casi.differenza*100/data_chart0$tamponi.differenza),2)
chart0<-ggplot(data=data_chart0, aes(x=data, y=percentuale)) +
ggtitle("Percentuale di tamponi positivi/tamponi totali")+
geom_bar(stat="identity", position=position_dodge(), fill = "#F800EB")+
labs(x = "data", y = "%")+scale_x_date(date_breaks = "6 day",
date_labels = "%b %d")+coord_cartesian(xlim=as.Date(c('2020-02-24','2020-03-28')))+
theme_map()
l <- list(
font = list(
family = "arial",
size = 12,
color = "white"),
bgcolor = NA,
bordercolor = NA,
borderwidth = 0,
orientation = "h",
x = 0.25,
y = -0.2)
t<- list(
font = list(
family = "arial",
size = 12
)
)
chart0<-ggplotly(chart0) %>%
layout(legend = l, title = t)
htmlwidgets::saveWidget(chart0, "chart0.html",  background = "rgba(0,0,0,0.0)")
#####################################################################
### chart 1 grafico sui casi totali e i casi attualemtne positivi####
################# N.B. aggiornare la data############################
#####################################################################
### lettura e formattazione dei dati ###
data_chart1<-andamento_nazionale[, c("data", "totale_casi", "totale_attualmente_positivi")]
colnames(data_chart1)<-c("data", "totali", "attualmente positivi")
data_chart1<-reshape2::melt(data_chart1, id.vars = "data", measure.vars = c("totali", "attualmente positivi"))
### creazione del grafico utilizzando ggplot2 ###
chart1<-ggplot(data=data_chart1, aes(x=data, y=value, color=variable)) +
ggtitle("Casi totali e attualmente positivi")+
geom_line()+
geom_point(shape = 21, size = 3, stroke = 0.5)+
labs(x = "data", y = "numero di casi")+scale_x_date(date_breaks = "6 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-28')))+
scale_color_manual(labels = c("totale", "attualmente positivi"), values=c("#F81608", "#FD6407"))+
theme_map()
### opzioni per la conversione del grafico di ggplot2 in plotly##
l <- list(
font = list(
family = "arial",
size = 12,
color = "white"),
bgcolor = NA,
bordercolor = NA,
borderwidth = 0,
orientation = "h",
x = 0.25,
y = -0.25)
### salvataggio del grafico in html utilizzando la libreria plotly###
chart1<-ggplotly(chart1) %>%
layout(legend = l, title = t)
htmlwidgets::saveWidget(chart1, "chart1.html",  background = "rgba(0,0,0,0.0)")
###########################################################
#### chart 2 grafico sul numero di guariti e di decessi ###
################# N.B. aggiornare la data##################
###########################################################
data_chart2<-andamento_nazionale[, c("data", "dimessi_guariti", "deceduti")]
colnames(data_chart2)<-c("data", "guariti", "deceduti")
data_chart2<-reshape2::melt(data_chart2, id.vars = "data", measure.vars = c("guariti", "deceduti"))
chart2<-ggplot(data=data_chart2, aes(x=data, y=value, color=variable)) +
ggtitle("Guariti VS deceduti")+
geom_line()+
geom_point(shape = 21, size = 3, stroke = 0.5)+
labs(x = "data", y = "numero di casi")+scale_x_date(date_breaks = "6 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-28')))+
scale_color_manual(labels = c("guariti", "deceduti"), values=c("#94D402", "#5F46E4"))+
theme_map()
chart2<-ggplotly(chart2) %>%
layout(legend = l, title = t)
htmlwidgets::saveWidget(chart2, "chart2.html",  background = "rgba(0,0,0,0.0)")
###########################################################
#### chart 3 grafico sul numero di attualemnte positivi ###
################# N.B. aggiornare la data##################
###########################################################
data_chart3<-andamento_nazionale[, c("data", "nuovi_attualmente_positivi")]
colnames(data_chart3)<-c("data", "nuovi_casi")
chart3<-ggplot(data=data_chart3, aes(x=data, y=nuovi_casi, group=1)) +
ggtitle("Nuovi casi")+
geom_line(aes(color="nuovi casi"))+
geom_point(shape = 21, size = 3, stroke = 0.5, aes(color="nuovi casi"))+
labs(x = "data", y = "numero di nuovi casi")+scale_x_date(date_breaks = "6 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-28')))+
scale_color_manual(name = NA, breaks = "nuovi casi", values = "#DEFA05")+theme_map()%+replace%
theme(plot.margin = margin(0, -1, 0, -2, "cm"))
l3 <- list(
font = list(
family = "arial",
size = 12,
color = "white"),
bgcolor = NA,
bordercolor = NA,
borderwidth = 0,
orientation = "h",
x = 0.4,
y = -0.25)
chart3<-ggplotly(chart3) %>%
layout(legend = l3, title = t)
htmlwidgets::saveWidget(chart3, "chart3.html",  background = "rgba(0,0,0,0.0)")
##############################################################################
### lettura dei dati regionali direttamente dal repo github e formattazione###
##############################################################################
url2<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "T")
regioni$data<-as.Date(regioni$data)
#############################################################
### chart 4 grafico sul numero di casi totali per regione ###
################# N.B. aggiornare la data####################
#############################################################
data_chart4<-regioni
### creazione palette con colori casuali per le regioni ###
library(randomcoloR)
n <- 21
palette<-distinctColorPalette(n)
chart4<-ggplot(data=data_chart4, aes(x=data, y=(totale_casi), color=denominazione_regione)) +
ggtitle("Casi totali per regione")+
geom_line()+
geom_point(shape = 21, size = 3, stroke = 0.5)+
labs(x = "data", y = "numero di casi")+scale_x_date(date_breaks = "6 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-28')))+
scale_color_manual(values=palette)+
theme_map()
l <- list(
font = list(
family = "arial",
size = 12,
color = "white"),
bgcolor = NA,
bordercolor = NA,
borderwidth = 0,
orientation = "h",
x = 0,
y = -0.2)
chart4<-ggplotly(chart4) %>%
layout(legend = l, title = t)
htmlwidgets::saveWidget(chart4, "chart4.html",  background = "rgba(0,0,0,0.0)")
#############################################################
#### chart 5 grafico sul numero di tamponi e casi totali  ###
################# N.B. aggiornare la data####################
#############################################################
data_chart5<-andamento_nazionale[, c("data", "totale_casi", "tamponi")]
colnames(data_chart5)<-c("data", "casi totali", "tamponi")
data_chart5<-reshape2::melt(data_chart5, id.vars = "data", measure.vars = c("casi totali", "tamponi"))
chart5<-ggplot(data=data_chart5, aes(x=data, y=value,fill=variable)) +
ggtitle("Tamponi giornalieri (cumulati)")+
geom_bar(stat="identity", position=position_dodge())+
labs(x = "data", y = " ")+scale_x_date(date_breaks = "6 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-28')))+
#scale_color_manual(labels = c("casi totali", "tamponi effettuati"))+
theme_map()
l <- list(
font = list(
family = "arial",
size = 12,
color = "white"),
bgcolor = NA,
bordercolor = NA,
borderwidth = 0,
orientation = "h",
x = 0.25,
y = -0.2)
chart5<-ggplotly(chart5) %>%
layout(legend = l, title = t)
htmlwidgets::saveWidget(chart5, "chart5.html",  background = "rgba(0,0,0,0.0)")
###########################################################################################
### creazione dati di base per le mappe regionali e provinciali da utilizzare in leaflet###
##################### N.B. aggiornare la data##############################################
###########################################################################################
library(rgdal)
library(sp)
###################### dati provinciali ###################################################################################
url3<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province-latest.csv")
province<-read.csv(text = url3, head = T)
province<-separate(data = province, col = data, into = c("data", "ora"), sep = "T")
province$data<-as.Date(province$data)
province$sigla_provincia<-as.character(province$sigla_provincia)### NA viene riconosciuto con null
province[20,8]<-'NA'
### lettura e formattazione dati. N.B. Cambiare la data per aggiornare le mappe###
regioni_dati<-regioni
regioni_dati<-split(regioni_dati, regioni_dati$data)
regioni_dati<-regioni_dati$`2020-03-28`
colnames(regioni_dati)[5]<-"DEN_REG"
province_dati<-province
colnames(province_dati)[8]<-"SIGLA"
### selezione dei datatset di interesse ###
casi_totali<-regioni_dati[, c(5, 16)]
deceduti<-regioni_dati[, c(5, 15)]
guariti<-regioni_dati[, c(5, 14)]
attualmente_positivi<-regioni_dati[, c(5, 12)]
casi_totali_prov<-province_dati[, c(7, 8, 11)]
casi_totali_prov<-subset(casi_totali_prov, denominazione_provincia!='In fase di definizione/aggiornamento')
### caricamento del file vettoriale delle regioni ###
regioni_geo<-readOGR("dati_territoriali.gpkg", "regioni_popolazione")
### caricamento del file vettoriale delle province ###
province_geo<-readOGR("dati_territoriali.gpkg", "province_popolazione")
### join tra il dato vettoriale e gli attributi ###
regioni_geo_casi_totali<-sp::merge(regioni_geo, casi_totali, by='DEN_REG')
regioni_geo_deceduti<-sp::merge(regioni_geo, c(deceduti, casi_totali), by='DEN_REG')
regioni_geo_guariti<-sp::merge(regioni_geo, guariti, by='DEN_REG')
regioni_geo_positivi<-sp::merge(regioni_geo, attualmente_positivi, by='DEN_REG')
province_geo_casi_totali<-sp::merge(province_geo, casi_totali_prov, by='SIGLA')
### nuovi dati su incidenza dei contagi su popolazione totale residente e tasso di mortalità per regionale ###
regioni_geo_casi_totali@data$incidenza_pop_tot<-round((regioni_geo_casi_totali@data$totale_casi/regioni_geo_casi_totali@data$popolazione_ISTAT_2019_POP_TOT*10000), 2)
regioni_geo_deceduti@data$tasso_mortalita<-round((regioni_geo_deceduti@data$deceduti*100/regioni_geo_deceduti@data$totale_casi), 2)
province_geo_casi_totali@data$incidenza_pop_tot<-round((province_geo_casi_totali@data$totale_casi/province_geo_casi_totali@data$POP_TOT_ISTAT*10000), 2)
### formattazione per leaflet ###
regioni_geo_casi_totali@data$totale_casi<-as.character(regioni_geo_casi_totali@data$totale_casi)
regioni_geo_deceduti@data$deceduti<-as.character(regioni_geo_deceduti@data$deceduti)
regioni_geo_guariti@data$dimessi_guariti<-as.character(regioni_geo_guariti@data$dimessi_guariti)
regioni_geo_positivi@data$totale_attualmente_positivi<-as.character(regioni_geo_positivi@data$totale_attualmente_positivi)
province_geo_casi_totali@data$totale_casi<-as.character(province_geo_casi_totali@data$totale_casi)
### export in formato geojson js per caricamento in leaflet ###
writeOGR(regioni_geo_casi_totali, "webmap/dati/casi_totali.js", layer="regioni_geo_casi_totali", driver="GeoJSON", overwrite_layer = T)
writeOGR(regioni_geo_deceduti, "webmap/dati/deceduti.js", layer="regioni_geo_deceduti", driver="GeoJSON", overwrite_layer = T)
writeOGR(regioni_geo_guariti, "webmap/dati/guariti.js", layer="regioni_geo_guariti", driver="GeoJSON", overwrite_layer = T)
writeOGR(regioni_geo_positivi, "webmap/dati/positivi.js", layer="regioni_geo_positivi", driver="GeoJSON", overwrite_layer = T)
writeOGR(province_geo_casi_totali, "webmap/dati/casi_totali_prov.js", layer="province_geo_casi_totali", driver="GeoJSON", overwrite_layer = T)
cbind(Mod1a$data, fitted(Mod1a))
cbind(Mod2a$data, fitted(Mod2a))
cbind(Mod3a$data, fitted(Mod3a))
cbind(Mod4a$data, fitted(Mod4a))
cbind(Mod5a$data, fitted(Mod5a))
t6a<-as.data.frame(table(kill$agricolture))
Mod6a<-glm(Freq~Var1, data = t6a, family = poisson)
summary(Mod6a)
cbind(Mod6a$data, fitted(Mod6a))
t6a<-as.data.frame(table(kill$vegetation_cover))
Mod6a<-glm(Freq~Var1, data = t6a, family = poisson)
summary(Mod6a)
cbind(Mod6a$data, fitted(Mod6a))
q<-as.data.frame(table(kill$water_distance_class2, kill$vegetation_cover, kill$agricolture))
names(q)
names(q)<-c("water_distance", "vegetation_cover", "agricolture")
q
q<-as.data.frame(table(kill$water_distance_class2, kill$vegetation_cover, kill$agricolture))
names(q)<-c("water_distance", "vegetation_cover", "agricolture", "freq")
q
modq<- glm(freq ~ (water_distance+vegetation_cover+agricolture)^2, data = q, family = poisson)
summary(modq)
cbind(modq$data, fitted(modq))
modq1<- glm(freq ~ water_distance+vegetation_cover+agricolture, data = q, family = poisson)
summary(modq1)
cbind(modq$data, fitted(modq))
summary(modq)
summary(modq1)
pchisq(deviance(modq1), df = df.residual(modq1), lower.tail = F)
pchisq(deviance(modq), df = df.residual(modq), lower.tail = F)
anova(modq, modq1,test="Chisq")
summary(modq)
summary(modq1)
summary(modq)
modq2<- glm(freq ~ water_distance*vegetation_cover*agricolture, data = q, family = poisson)
summary(mod2q)
summary(modq2)
cbind(modq2$data, fitted(modq2))
pchisq(deviance(modq2), df = df.residual(modq), lower.tail = F)
summary(modq)
summary(modq1)
summary(Mod2a)
summary(modq)
summary(modq1)
q
kill
