library(RCurl)
url<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni-20200312.csv")
data<-read.csv(text = url)
data
library(ggplot2)
ggplot(data=data, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
url<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
data<-read.csv(text = url)
ggplot(data=data, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
url2<-("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
data2<-read.csv(text = url2)
ggplot(data=data2, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
url2
data2
url2<-("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
url2
data2<-read.csv(text = url2)
data2
url2<-("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
data2<-read.csv(text = url2)
data2
data
data<-read.csv(text = url, head = T)
data
data2<-read.csv(text = url2, headt = T)
data2<-read.csv(text = url2, head = T)
data2
url2<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
data2<-read.csv(text = url2, head = T)
ggplot(data=data2, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi, group=1), col = regioni) +
geom_line()+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi, group=1), col = regioni) +
geom_line()+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi)) +
geom_line()+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi), group = regioni) +
geom_line()+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi), group = regioni) +
geom_line(aes(color=regioni))+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi), group = regioni) +
geom_line(aes(color=regioni))+
geom_point()
data2
ggplot(data=data2, aes(x=data, y=totale_casi), group = data) +
geom_line(aes(color=regioni))+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi), group = data) +
geom_line()+
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi), group = data) +
geom_point()
ggplot(data=data2, aes(x=data, y=totale_casi), group = data) +
geom_point()+
geom_line(aes(color = regioni))
data2
ggplot(data=data2, aes(x=data, y=totale_casi), group = data) +
geom_point()+
geom_line(aes(color = denominazione_regione))
ggplot(data=data2, aes(x=data, y=totale_casi), group = denominazione_regione) +
geom_point()+
geom_line(aes(color = denominazione_regione))
data2
ggplot(data=data2, aes(x=data, y=totale_casi), group = 1) +
geom_point()+
geom_line(aes(color = denominazione_regione))
str(data2)
ggplot(data=data2, aes(x=data, y=totale_casi), group = denominazione_regione) +
geom_point()+
geom_line(aes(color = denominazione_regione))
data2
library(dplyr)
separate(data, 1, into, sep = " ", remove = TRUE)
separate(data, 1, sep = " ", remove = TRUE)
library(tidyr)
data
separate(data = data, col = data, into = c("data", "ora"))
ggplot(data=data, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
separate(data = data, col = data, into = c("data", "ora"), sep = "\\ ")
ggplot(data=data, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
data<-read.csv(text = url, head = T)
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = data, col = data, into = c("data", "ora"), sep = "\\ ")
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
regioni<-read.csv(text = url2, head = T)
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = data, col = data, into = c("data", "ora"), sep = "\\ ")
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
url2<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = data, col = region, into = c("data", "ora"), sep = "\\ ")
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
ggplot(data=regiono, aes(x=data, y=totale_casi), group = denominazione_regione) +
geom_point()+
geom_line(aes(color = denominazione_regione))
ggplot(data=regioni, aes(x=data, y=totale_casi), group = denominazione_regione) +
geom_point()+
geom_line(aes(color = denominazione_regione))
ggplot(data=regioni, aes(x=data, y=totale_casi), group = concat(denominazione_regione, data)) +
geom_point()+
geom_line(aes(color = denominazione_regione))
concat(denominazione_regione, data)
group = concatenate(denominazione_regione, data)
ggplot(data=regioni, aes(x=data, y=totale_casi), group = denominazione_regione) +
geom_point()+
geom_line(aes(color = denominazione_regione))
ggplot(data=regioni, aes(x=data, y=totale_casi), group = denominazione_regione) +
geom_point()+
geom_line()
regioni<-regioni$gruppo = paste(regioni$data,regioni$denominazione_regione)
regioni$gruppo<-paste(regioni$data,regioni$denominazione_regione)
ggplot(data=regioni, aes(x=data, y=totale_casi), group = gruppo) +
geom_point()+
geom_line()
ggplot(data=regioni, aes(x=data, y=totale_casi), group = gruppo) +
geom_point()+
geom_line()
ggplot(data=regioni, aes(x=data, y=totale_casi), group =1) +
geom_point()+
geom_line()
ggplot(data=regioni, aes(x=data, y=totale_casi), group =1) +
geom_point()+
geom_line(aes(color = gruppo))
ggplot(data=regioni, aes(x=data, y=totale_casi), group =1) +
geom_point()+
geom_line(aes(color = denominazione_regione))
regioni
ggplot(data=regioni, aes(x=denominazione_regione, y=totale_casi), group =1) +
geom_point()+
geom_line(aes(color = denominazione_regione))
ggplot(data=regioni, aes(x=denominazione_regione, y=totale_casi), group =1) +
geom_point()+
geom_line()
ggplot(data=regioni, aes(x=denominazione_regione, y=totale_casi)) +
geom_point()+
geom_line()
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
ggplot(data=regioni, aes(x=data, y=totale_casi)) +
geom_point()+
geom_line()
ggplot(data=regioni, aes(x=data, y=totale_casi)) +
geom_point()+
geom_line(aes(color = denominazione_regione))
str(regioni)
ggplot(data=regioni, aes(x=data, y=totale_casi)) +
geom_point(aes(color = denominazione_regione))+
geom_line()
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point(aes(color = denominazione_regione))+
geom_line()
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()
ggplot(data=regioni, aes(x=as.numeric(data), y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()
regioni$data
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()
regioni$data<-as.Date(data, format = "%y/%m/%d")
regioni$data<-as.Date(regioni$data, format = "%y/%m/%d")
str(regioni)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
regioni$data
regioni$data<-as.Date(regioni$data, format = "%y/%m/%d")
regioni$data
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
regioni$data<-as.Date(regioni$data, format = "%y-%m-%d")
str(regioni)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
regioni$data
regioni$data<-as.Date(regioni$data, format = "%y-%m-%d")
regioni$data
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
regioni$data<-as.Date(regioni$data)
regioni$data
str(regioni)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()
str(regioni)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+theme_bw
str(regioni)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+theme_bw()
library(plotly)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+theme_bw()
install.packages("ggplotly")
library(ggplotly)
install.packages("installr")
library(installr)
updateR()
library(MASS)
library(vcdExtra)
library(RCurl)
install.packages("RCurl")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("plotly")
install.packages("ggplotly")
library(ggplotly)
library(plotly)
library(ggplot2)
library(RCurl)
library(ggplot2)
library(tidyr)
library(plotly)
url<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = data, col = data, into = c("data", "ora"), sep = "\\ ")
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale
andamento_nazionale<-separate(data = andamento_nazionale, col = data, into = c("data", "ora"), sep = "\\ ")
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()
ggplotly(p)
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")
p
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme_bw(axis.text.x = element_text(angle = 90))
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 45))
p
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = andamento_nazionale, col = data, into = c("data", "ora"), sep = "\\ ")
andamento_nazionale$data<-as.Date(andamento_nazionale$data)
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 90))
p
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 90))+scale_x_continuous(name="data", limits=c('feb24', 'mar12'))
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 90))+scale_x_date(date_breaks = "1 day",
labels=date_format("%b-%Y"),
limits = as.Date(c('2020-02-24','2020-03-12')))
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 90))+scale_x_date(date_breaks = "1 day",
limits = as.Date(c('2020-02-24','2020-03-12')))
p
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 90))+scale_x_date(date_breaks = "2 day",
limits = as.Date(c('2020-02-24','2020-03-12')))
p
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
limits = as.Date(c('2020-02-24','2020-03-12')))
p
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
labels=date_format("%d-%m"),
limits = as.Date(c('2020-02-24','2020-03-12')))
p<-ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
labels=format("%d-%m"),
limits = as.Date(c('2020-02-24','2020-03-12')))
p
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
labels=format("%d-%m-%y"),
limits = as.Date(c('2020-02-24','2020-03-12')))
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
format="%d/%m/%Y"),
limits = as.Date(c('2020-02-24','2020-03-12')))
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
format="%d/%m/%Y",
limits = as.Date(c('2020-02-24','2020-03-12')))
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
format=("%d/%m/%Y"),
limits = as.Date(c('2020-02-24','2020-03-12')))
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
format=("%d-%m-%Y"),
limits = as.Date(c('2020-02-24','2020-03-12')))
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))
ggplot(data=andamento_nazionale, aes(x=data, y=totale_casi, group=1)) +
geom_line()+
geom_point()+
labs(x = "data", y = "casi totali")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplotly(p)
url2<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
regioni$data<-as.Date(regioni$data)
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+
abs(x = "data", y = "casi totali per regione")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+
labs(x = "data", y = "casi totali per regione")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplotly(p1)
p1<-ggplot(data=regioni, aes(x=data, y=totale_casi, color = denominazione_regione)) +
geom_point()+
geom_line()+
labs(x = "data", y = "casi totali per regione")+
theme(axis.text.x = element_text(angle = 0))+scale_x_date(date_breaks = "2 day",
date_labels = "%b %d",
limits = as.Date(c('2020-02-24','2020-03-12')))+theme_classic()
ggplotly(p1)
library(RCurl)
library(ggplot2)
library(tidyr)
library(plotly)
library(reshape2)
library(rjson)
source("custom_theme.R") ##funzione per customizzare l'output di ggplot2 ##
######
setwd("I:\\Progetti\\GitHub\\webmap-COVID-19-Italia\\webmap\\dati")
url<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = andamento_nazionale, col = data, into = c("data", "ora"), sep = "\\ ")
andamento_nazionale$data<-as.Date(andamento_nazionale$data)
library(RCurl)
library(ggplot2)
library(tidyr)
library(plotly)
library(reshape2)
library(rjson)
source("custom_theme.R") ##funzione per customizzare l'output di ggplot2 ##
########################################################################################
### lettura dei dati andamento nazionale direttamente dal repo github e formattazione###
########################################################################################
url<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
andamento_nazionale<-read.csv(text = url, head = T)
andamento_nazionale<-separate(data = andamento_nazionale, col = data, into = c("data", "ora"), sep = "\\ ")
andamento_nazionale$data<-as.Date(andamento_nazionale$data)
#############################################################################
### creazione dati di base per le mappe regionali da utilizzare in leaflet###
##################### N.B. aggiornare la data################################
#############################################################################
library(rgdal)
library(sp)
### lettura e formttazione dati. N.B. Cambiare la data per aggiornare le mappe###
regioni_dati<-regioni
regioni_dati<-split(regioni_dati, regioni_dati$data)
url2<-getURL("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
regioni<-read.csv(text = url2, head = T)
regioni<-separate(data = regioni, col = data, into = c("data", "ora"), sep = "\\ ")
regioni$data<-as.Date(regioni$data)
### lettura e formttazione dati. N.B. Cambiare la data per aggiornare le mappe###
regioni_dati<-regioni
regioni_dati<-split(regioni_dati, regioni_dati$data)
regioni_dati<-regioni_dati$`2020-03-18`
colnames(regioni_dati)[5]<-"DEN_REG"
### selezione dei datatset di interesse ###
casi_totali<-regioni_dati[, c(5, 16)]
deceduti<-regioni_dati[, c(5, 15)]
guariti<-regioni_dati[, c(5, 14)]
attualmente_positivi<-regioni_dati[, c(5, 12)]
### caricamento del file vettoriale delle regioni ###
regioni_geo<-readOGR("regioni.gpkg", "regioni_popolazione")
### caricamento del file vettoriale delle regioni ###
regioni_geo<-readOGR("regioni.gpkg", "regioni_popolazione")
#############################################################################
### creazione dati di base per le mappe regionali da utilizzare in leaflet###
##################### N.B. aggiornare la data################################
#############################################################################
library(rgdal)
library(sp)
### lettura e formttazione dati. N.B. Cambiare la data per aggiornare le mappe###
regioni_dati<-regioni
regioni_dati<-split(regioni_dati, regioni_dati$data)
regioni_dati<-regioni_dati$`2020-03-18`
colnames(regioni_dati)[5]<-"DEN_REG"
### selezione dei datatset di interesse ###
casi_totali<-regioni_dati[, c(5, 16)]
getwd()
setwd("I:/Progetti/GitHub/webmap-COVID-19-Italia")
library(rgdal)
library(sp)
### lettura e formttazione dati. N.B. Cambiare la data per aggiornare le mappe###
regioni_dati<-regioni
regioni_dati<-split(regioni_dati, regioni_dati$data)
regioni_dati<-regioni_dati$`2020-03-18`
colnames(regioni_dati)[5]<-"DEN_REG"
### selezione dei datatset di interesse ###
casi_totali<-regioni_dati[, c(5, 16)]
deceduti<-regioni_dati[, c(5, 15)]
guariti<-regioni_dati[, c(5, 14)]
attualmente_positivi<-regioni_dati[, c(5, 12)]
### caricamento del file vettoriale delle regioni ###
regioni_geo<-readOGR("regioni.gpkg", "regioni_popolazione")
### join tra il dato vettoriale e gli attributi ###
regioni_geo_casi_totali<-sp::merge(regioni_geo, casi_totali, by='DEN_REG')
regioni_geo_deceduti<-sp::merge(regioni_geo, c(deceduti, casi_totali), by='DEN_REG')
regioni_geo_guariti<-sp::merge(regioni_geo, guariti, by='DEN_REG')
regioni_geo_positivi<-sp::merge(regioni_geo, attualmente_positivi, by='DEN_REG')
### nuovi dati su incidenza dei contagi su popolazione totale residente e tasso di mortalità per regionale ###
regioni_geo_casi_totali@data$incidenza_pop_tot<-round((regioni_geo_casi_totali@data$totale_casi/regioni_geo_casi_totali@data$popolazione_ISTAT_2019_POP_TOT*10000), 2)
regioni_geo_deceduti@data$tasso_mortalita<-round((regioni_geo_deceduti@data$deceduti*100/regioni_geo_deceduti@data$totale_casi), 2)
regioni_geo_casi_totali@data
regioni_geo_deceduti@data$tasso_mortalita<-round((regioni_geo_deceduti@data$deceduti*100/regioni_geo_deceduti@data$totale_casi), 2)
### formattazione per leaflet ###
regioni_geo_casi_totali@data$totale_casi<-as.character(regioni_geo_casi_totali@data$totale_casi)
regioni_geo_deceduti@data$deceduti<-as.character(regioni_geo_deceduti@data$deceduti)
regioni_geo_guariti@data$dimessi_guariti<-as.character(regioni_geo_guariti@data$dimessi_guariti)
regioni_geo_positivi@data$totale_attualmente_positivi<-as.character(regioni_geo_positivi@data$totale_attualmente_positivi)
### export in formato geojson js per caricamento in leaflet ###
writeOGR(regioni_geo_casi_totali, "webmap/dati/casi_totali.js", layer="regioni_geo_casi_totali", driver="GeoJSON", overwrite_layer = T)
writeOGR(regioni_geo_deceduti, "webmap/dati/deceduti.js", layer="regioni_geo_deceduti", driver="GeoJSON", overwrite_layer = T)
writeOGR(regioni_geo_guariti, "webmap/dati/guariti.js", layer="regioni_geo_guariti", driver="GeoJSON", overwrite_layer = T)
writeOGR(regioni_geo_positivi, "webmap/dati/positivi.js", layer="regioni_geo_positivi", driver="GeoJSON", overwrite_layer = T)
